
import { InstanceTranslations } from '../types/instance';

export const instanceTranslations: InstanceTranslations = {

  // InstanceMonitoring.tsx
  instanceMonitoring: "Instance Monitoring",
  describeMonitorInstance: "Monitor and manage your server instances in real-time",
  addServerAgent: "Add Server Agent",
  errorLoadingServers: "Error loading servers",
  unableToFetchServerData: "Unable to fetch server data. Please check your connection and try again.",
  retry: "Retry",

  

  // ServerTable.tsx
  servers: "Servers",
  loadingServers: "Loading servers...",
  searchServersPlaceholder: "Search servers...",
  noServersFound: "No servers found",
  name: "Name",
  status: "Status",
  OS: "OS",
  IPAddress: "IP Address",
  CPU: "CPU",
  memory: "Memory",
  disk: "Disk",
  uptime: "Uptime",
  lastChecked: "Last Checked",
  actions: "Actions",
  viewServerDetail: "View Server Detail",
  containerMonitoring: "Container Monitoring",
  resumeMonitoring: "Resume Monitoring",
  pauseMonitoring: "Pause Monitoring",
  editServer: "Edit Server",
  deleteServer: "Delete Server",
  deleteServerConfirmTitle: "Are you sure you want to delete this server?",
  deleteServerConfirmDesc: "This action cannot be undone. This will permanently delete {name} and all of its monitoring data.",
  cancel: "Cancel",
  deleting: "Deleting...",
  delete: "Delete",
  serverDeleted: "Server deleted",
  serverDeletedDesc: "{name} has been deleted successfully.",
  error: "Error",
  deleteServerError: "Failed to delete server. Please try again.",
  serverPaused: "Server paused",
  serverResumed: "Server resumed",
  monitoringPaused: "Monitoring paused for {name}",
  monitoringResumed: "Monitoring resumed for {name}",
  pauseServerError: "Failed to pause server monitoring. Please try again.",
  resumeServerError: "Failed to resume server monitoring. Please try again.",

  // server cards 
  totalServers: "TOTAL SERVERS",
  onlineServers: "ONLINE SERVERS",
  offlineServers: "OFFLINE SERVERS",
  warningServers: "WARNING SERVERS",

  // AddServerAgentDialog.tsx
  addServerMonitoringAgent: "Add Server Monitoring Agent",
  configureAgentDesc: "Configure a new server monitoring agent to track system metrics and performance.",
  configureAgent: "Configure Agent",
  oneClickInstall: "One-Click Install",
  dockerOneClick: "Docker One-Click",
  manualInstallation: "Manual Installation",
  validationError: "Validation Error",
  fillRequiredFields: "Please fill in all required fields.",
  serverAgentCreated: "Server Agent Created",
  serverAgentCreatedDesc: "{name} monitoring agent has been configured successfully.",
  failedToCreateAgent: "Failed to create server monitoring agent.",

  // ServerAgentConfigForm.tsx
  serverName: "Server Name",
  serverNamePlaceholder: "e.g., web-server-01",
  serverNameDesc: "What is the name or label used as the identifier",
  serverAgentId: "Server Agent ID",
  serverAgentIdDesc: "Auto-generated unique identifier",
  operatingSystem: "Operating System",
  checkInterval: "Check Interval",
  selectInterval: "Select interval",
  interval30s: "30 seconds",
  interval1m: "1 minute",
  interval2m: "2 minutes",
  interval5m: "5 minutes",
  checkIntervalDesc: "How often to check the server and metric status",
  retryAttempts: "Retry Attempts",
  selectRetryAttempts: "Select retry attempts",
  attempt1: "1 attempt",
  attempt2: "2 attempts",
  attempt3: "3 attempts",
  attempt5: "5 attempts",
  retryAttemptsDesc: "Number of retry attempts before marking as down",
  serverToken: "Server Token",
  serverTokenDesc: "Auto-generated authentication token",
  systemUrl: "System URL",
  systemUrlDesc: "Current system API URL",
  creatingAgent: "Creating Agent...",
  createServerAgent: "Create Server Agent"


  ,

  // EditServerDialog.tsx
  editServerConfiguration: "Edit Server Configuration",
  serverNameLabel: "Server Name *",
  enterServerNamePlaceholder: "Enter server name",
  checkIntervalLabel: "Check Interval",
  interval10m: "10 minutes",
  maxRetriesLabel: "Max Retries",
  selectMaxRetries: "Select max retries",
  retry1: "1 retry",
  retry2: "2 retries",
  retry3: "3 retries",
  retry5: "5 retries",
  retry10: "10 retries",
  dockerMonitoring: "Docker Monitoring",
  enabled: "Enabled",
  disabled: "Disabled",
  enableNotifications: "Enable Notifications",
  notificationSettings: "Notification Settings",
  notificationChannels: "Notification Channels",
  loadingChannels: "Loading channels...",
  noChannelsAvailable: "No notification channels available",
  selectedChannels: "Selected Channels:",
  serverSetThreshold: "Server Set Threshold",
  loadingThresholds: "Loading thresholds...",
  selectServerThreshold: "Select server threshold",
  noThreshold: "No threshold (use default)",
  thresholdDetails: "Threshold Details",
  cpuThresholdPct: "CPU Threshold (%)",
  ramThresholdPct: "RAM Threshold (%)",
  diskThresholdPct: "Disk Threshold (%)",
  networkThresholdPct: "Network Threshold (%)",
  serverTemplate: "Server Template",
  loadingTemplates: "Loading templates...",
  selectServerTemplate: "Select server template",
  noTemplate: "No template (use default)",
  templateDetails: "Template Details",
  ramMessage: "RAM Message",
  cpuMessage: "CPU Message",
  diskMessage: "Disk Message",
  networkMessage: "Network Message",
  upMessage: "Up Message",
  downMessage: "Down Message",
  noMessageDefined: "No {name} message defined",
  serverUpdated: "Server updated",
  serverUpdatedDesc: "{name} has been updated successfully.",
  updating: "Updating...",
  updateServer: "Update Server",
  failedToLoadChannels: "Failed to load notification channels",
  failedToLoadTemplates: "Failed to load templates",
  failedToLoadThresholds: "Failed to load server thresholds",
  warning: "Warning",
  serverUpdatedButThresholdFailed: "Server updated but failed to update threshold values.",
  failedToUpdateServer: "Failed to update server. Please try again.",

  // ServerHistoryCharts.tsx
  historicalPerformance: "Historical Performance",
  loading: "Loading...",
  errorLoadingChartData: "Error loading chart data",
  noHistoricalData: "No historical data available for {{timeRange}}",
  rawMetricsCount: "Raw metrics count: {{count}}",
  serverIdTimeRange: "Server ID: {{serverId}} • Time Range: {{timeRange}}",
  dataExistsOutsideRange: "Data exists but may be outside selected time range",
  noMetricsDataFound: "No metrics data found",
  dataPointsTimeRange: "{{count}} data points • {{timeRange}}",
  // updating: "Updating...",

};
